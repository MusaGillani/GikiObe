generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model courseplo {
  id         Int      @id @default(autoincrement())
  RegNo      Int?     @db.UnsignedInt
  CourseCode String   @db.VarChar(30)
  Semester   String   @db.VarChar(30)
  PLO1       String   @db.VarChar(30)
  PLO2       String   @db.VarChar(30)
  PLO3       String   @db.VarChar(30)
  PLO4       String   @db.VarChar(30)
  PLO5       String   @db.VarChar(30)
  PLO6       String   @db.VarChar(30)
  PLO7       String   @db.VarChar(30)
  PLO8       String   @db.VarChar(30)
  PLO9       String   @db.VarChar(30)
  PLO10      String   @db.VarChar(30)
  PLO11      String   @db.VarChar(30)
  PLO12      String   @db.VarChar(30)
  student    student? @relation(fields: [RegNo], references: [RegNo], onDelete: Restrict, onUpdate: Restrict, map: "courseplo_ibfk_1")

  @@index([RegNo], map: "RegNo")
}

model schemeofstudy {
  Semester           String              @db.VarChar(30)
  Batch              Int
  CourseCode         String              @id @db.VarChar(30)
  CourseTitle        String              @db.VarChar(255)
  course_description String?             @db.Text
  course_allotments  course_allotments[]
  course_clos        course_clos[]
}

model student {
  RegNo     Int         @id @db.UnsignedInt
  Faculty   String      @db.VarChar(30)
  Name      String      @db.VarChar(30)
  Batch     Int?
  courseplo courseplo[]
}

model course_allotments {
  CourseCode         String             @db.VarChar(30)
  instructor_id      String             @db.VarChar(255)
  schemeofstudy      schemeofstudy      @relation(fields: [CourseCode], references: [CourseCode], onUpdate: Restrict, map: "course_allotments_ibfk_2")
  course_instructors course_instructors @relation(fields: [instructor_id], references: [instructor_id], onUpdate: Restrict, map: "course_allotments_ibfk_1")

  @@id([CourseCode, instructor_id])
  @@index([instructor_id], map: "instructor_id")
}

model course_clos {
  CourseCode    String        @db.VarChar(30)
  clo_num       Int
  clo_desc      String        @db.VarChar(255)
  mapped_on_plo Int
  weightage     Decimal       @db.Decimal(5, 2)
  schemeofstudy schemeofstudy @relation(fields: [CourseCode], references: [CourseCode], onUpdate: Restrict, map: "course_clos_ibfk_1")
  plos          plos          @relation(fields: [mapped_on_plo], references: [plo_num], onUpdate: Restrict, map: "course_clos_ibfk_2")

  @@id([CourseCode, clo_num])
  @@index([mapped_on_plo], map: "mapped_on_plo")
}

model course_instructors {
  instructor_id     String              @id @db.VarChar(255)
  full_name         String              @db.VarChar(20)
  faculty           String?             @db.VarChar(20)
  course_allotments course_allotments[]
}

model plos {
  plo_num        Int           @id
  plo_statement  String        @db.VarChar(255)
  plo_desc       String        @db.Text
  pass_threshold Decimal       @db.Decimal(19, 4)
  course_clos    course_clos[]
}

model assessments {
  course_code            String  @db.VarChar(30)
  reg_no                 Int
  assessment_type        String  @db.VarChar(30)
  serial_no              Int
  question_no            Int
  marks_obtained         Decimal @db.Decimal(19, 4)
  total_marks            Decimal @db.Decimal(19, 4)
  mapped_on_clo          Int?
  clo_threshold          Decimal @db.Decimal(19, 4)
  obtained_clo_threshold Decimal @db.Decimal(19, 4)
  id                     Int     @id @default(autoincrement())
}

model users {
  username String @id @db.VarChar(30)
  password String @db.VarChar(30)
  userType String @db.VarChar(30)
}

model grading_policies {
  course_code    String  @id @db.VarChar(30)
  assignments_wt Decimal @db.Decimal(19, 4)
  quizzes_wt     Decimal @db.Decimal(19, 4)
  mid_wt         Decimal @db.Decimal(19, 4)
  final_wt       Decimal @db.Decimal(19, 4)
  final_proj_wt  Decimal @db.Decimal(19, 4)
}

model faculty_deans {
  dean_id String @id @db.VarChar(30)
  name    String @db.VarChar(255)
  faculty String @db.VarChar(30)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model course_enrollments {
  reg_no      Int
  course_code String @db.VarChar(30)
  id          Int    @id @default(autoincrement())

  @@ignore
}

model plo_attainment {
  id             Int      @id @default(autoincrement())
  reg_no         Int?
  course_code    String?  @db.VarChar(30)
  semester       Int?
  plo_num        Int
  plo_attainment Decimal? @default(0.0000) @db.Decimal(19, 4)
}
