
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model courseplo
 * 
 */
export type courseplo = {
  RegNo: number
  CourseCode: string
  Semester: string
  PLO1: string
  PLO2: string
  PLO3: string
  PLO4: string
  PLO5: string
  PLO6: string
  PLO7: string
  PLO8: string
  PLO9: string
  PLO10: string
  PLO11: string
  PLO12: string
}

/**
 * Model schemeofstudy
 * 
 */
export type schemeofstudy = {
  Semester: string
  Batch: number
  CourseCode: string
  CourseTitle: string
}

/**
 * Model student
 * 
 */
export type student = {
  RegNo: number
  Faculty: string
  Name: string
  Batch: number | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Courseplos
 * const courseplos = await prisma.courseplo.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Courseplos
   * const courseplos = await prisma.courseplo.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.courseplo`: Exposes CRUD operations for the **courseplo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courseplos
    * const courseplos = await prisma.courseplo.findMany()
    * ```
    */
  get courseplo(): Prisma.courseploDelegate<GlobalReject>;

  /**
   * `prisma.schemeofstudy`: Exposes CRUD operations for the **schemeofstudy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schemeofstudies
    * const schemeofstudies = await prisma.schemeofstudy.findMany()
    * ```
    */
  get schemeofstudy(): Prisma.schemeofstudyDelegate<GlobalReject>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.studentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.9.2
   * Query Engine version: bcc2ff906db47790ee902e7bbc76d7ffb1893009
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    courseplo: 'courseplo',
    schemeofstudy: 'schemeofstudy',
    student: 'student'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model courseplo
   */


  export type AggregateCourseplo = {
    _count: CourseploCountAggregateOutputType | null
    _avg: CourseploAvgAggregateOutputType | null
    _sum: CourseploSumAggregateOutputType | null
    _min: CourseploMinAggregateOutputType | null
    _max: CourseploMaxAggregateOutputType | null
  }

  export type CourseploAvgAggregateOutputType = {
    RegNo: number | null
  }

  export type CourseploSumAggregateOutputType = {
    RegNo: number | null
  }

  export type CourseploMinAggregateOutputType = {
    RegNo: number | null
    CourseCode: string | null
    Semester: string | null
    PLO1: string | null
    PLO2: string | null
    PLO3: string | null
    PLO4: string | null
    PLO5: string | null
    PLO6: string | null
    PLO7: string | null
    PLO8: string | null
    PLO9: string | null
    PLO10: string | null
    PLO11: string | null
    PLO12: string | null
  }

  export type CourseploMaxAggregateOutputType = {
    RegNo: number | null
    CourseCode: string | null
    Semester: string | null
    PLO1: string | null
    PLO2: string | null
    PLO3: string | null
    PLO4: string | null
    PLO5: string | null
    PLO6: string | null
    PLO7: string | null
    PLO8: string | null
    PLO9: string | null
    PLO10: string | null
    PLO11: string | null
    PLO12: string | null
  }

  export type CourseploCountAggregateOutputType = {
    RegNo: number
    CourseCode: number
    Semester: number
    PLO1: number
    PLO2: number
    PLO3: number
    PLO4: number
    PLO5: number
    PLO6: number
    PLO7: number
    PLO8: number
    PLO9: number
    PLO10: number
    PLO11: number
    PLO12: number
    _all: number
  }


  export type CourseploAvgAggregateInputType = {
    RegNo?: true
  }

  export type CourseploSumAggregateInputType = {
    RegNo?: true
  }

  export type CourseploMinAggregateInputType = {
    RegNo?: true
    CourseCode?: true
    Semester?: true
    PLO1?: true
    PLO2?: true
    PLO3?: true
    PLO4?: true
    PLO5?: true
    PLO6?: true
    PLO7?: true
    PLO8?: true
    PLO9?: true
    PLO10?: true
    PLO11?: true
    PLO12?: true
  }

  export type CourseploMaxAggregateInputType = {
    RegNo?: true
    CourseCode?: true
    Semester?: true
    PLO1?: true
    PLO2?: true
    PLO3?: true
    PLO4?: true
    PLO5?: true
    PLO6?: true
    PLO7?: true
    PLO8?: true
    PLO9?: true
    PLO10?: true
    PLO11?: true
    PLO12?: true
  }

  export type CourseploCountAggregateInputType = {
    RegNo?: true
    CourseCode?: true
    Semester?: true
    PLO1?: true
    PLO2?: true
    PLO3?: true
    PLO4?: true
    PLO5?: true
    PLO6?: true
    PLO7?: true
    PLO8?: true
    PLO9?: true
    PLO10?: true
    PLO11?: true
    PLO12?: true
    _all?: true
  }

  export type CourseploAggregateArgs = {
    /**
     * Filter which courseplo to aggregate.
     * 
    **/
    where?: courseploWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseplos to fetch.
     * 
    **/
    orderBy?: Enumerable<courseploOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: courseploWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseplos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseplos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courseplos
    **/
    _count?: true | CourseploCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseploAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseploSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseploMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseploMaxAggregateInputType
  }

  export type GetCourseploAggregateType<T extends CourseploAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseplo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseplo[P]>
      : GetScalarType<T[P], AggregateCourseplo[P]>
  }




  export type CourseploGroupByArgs = {
    where?: courseploWhereInput
    orderBy?: Enumerable<courseploOrderByWithAggregationInput>
    by: Array<CourseploScalarFieldEnum>
    having?: courseploScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseploCountAggregateInputType | true
    _avg?: CourseploAvgAggregateInputType
    _sum?: CourseploSumAggregateInputType
    _min?: CourseploMinAggregateInputType
    _max?: CourseploMaxAggregateInputType
  }


  export type CourseploGroupByOutputType = {
    RegNo: number
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
    _count: CourseploCountAggregateOutputType | null
    _avg: CourseploAvgAggregateOutputType | null
    _sum: CourseploSumAggregateOutputType | null
    _min: CourseploMinAggregateOutputType | null
    _max: CourseploMaxAggregateOutputType | null
  }

  type GetCourseploGroupByPayload<T extends CourseploGroupByArgs> = Promise<
    Array<
      PickArray<CourseploGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseploGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseploGroupByOutputType[P]>
            : GetScalarType<T[P], CourseploGroupByOutputType[P]>
        }
      >
    >


  export type courseploSelect = {
    RegNo?: boolean
    CourseCode?: boolean
    Semester?: boolean
    PLO1?: boolean
    PLO2?: boolean
    PLO3?: boolean
    PLO4?: boolean
    PLO5?: boolean
    PLO6?: boolean
    PLO7?: boolean
    PLO8?: boolean
    PLO9?: boolean
    PLO10?: boolean
    PLO11?: boolean
    PLO12?: boolean
    student?: boolean | studentArgs
  }

  export type courseploInclude = {
    student?: boolean | studentArgs
  }

  export type courseploGetPayload<
    S extends boolean | null | undefined | courseploArgs,
    U = keyof S
      > = S extends true
        ? courseplo
    : S extends undefined
    ? never
    : S extends courseploArgs | courseploFindManyArgs
    ?'include' extends U
    ? courseplo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'student'
        ? studentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof courseplo ?courseplo [P]
  : 
          P extends 'student'
        ? studentGetPayload<S['select'][P]> : never
  } 
    : courseplo
  : courseplo


  type courseploCountArgs = Merge<
    Omit<courseploFindManyArgs, 'select' | 'include'> & {
      select?: CourseploCountAggregateInputType | true
    }
  >

  export interface courseploDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Courseplo that matches the filter.
     * @param {courseploFindUniqueArgs} args - Arguments to find a Courseplo
     * @example
     * // Get one Courseplo
     * const courseplo = await prisma.courseplo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends courseploFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, courseploFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'courseplo'> extends True ? CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>> : CheckSelect<T, Prisma__courseploClient<courseplo | null >, Prisma__courseploClient<courseploGetPayload<T> | null >>

    /**
     * Find the first Courseplo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseploFindFirstArgs} args - Arguments to find a Courseplo
     * @example
     * // Get one Courseplo
     * const courseplo = await prisma.courseplo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends courseploFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, courseploFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'courseplo'> extends True ? CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>> : CheckSelect<T, Prisma__courseploClient<courseplo | null >, Prisma__courseploClient<courseploGetPayload<T> | null >>

    /**
     * Find zero or more Courseplos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseploFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courseplos
     * const courseplos = await prisma.courseplo.findMany()
     * 
     * // Get first 10 Courseplos
     * const courseplos = await prisma.courseplo.findMany({ take: 10 })
     * 
     * // Only select the `RegNo`
     * const courseploWithRegNoOnly = await prisma.courseplo.findMany({ select: { RegNo: true } })
     * 
    **/
    findMany<T extends courseploFindManyArgs>(
      args?: SelectSubset<T, courseploFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<courseplo>>, PrismaPromise<Array<courseploGetPayload<T>>>>

    /**
     * Create a Courseplo.
     * @param {courseploCreateArgs} args - Arguments to create a Courseplo.
     * @example
     * // Create one Courseplo
     * const Courseplo = await prisma.courseplo.create({
     *   data: {
     *     // ... data to create a Courseplo
     *   }
     * })
     * 
    **/
    create<T extends courseploCreateArgs>(
      args: SelectSubset<T, courseploCreateArgs>
    ): CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>>

    /**
     * Create many Courseplos.
     *     @param {courseploCreateManyArgs} args - Arguments to create many Courseplos.
     *     @example
     *     // Create many Courseplos
     *     const courseplo = await prisma.courseplo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends courseploCreateManyArgs>(
      args?: SelectSubset<T, courseploCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Courseplo.
     * @param {courseploDeleteArgs} args - Arguments to delete one Courseplo.
     * @example
     * // Delete one Courseplo
     * const Courseplo = await prisma.courseplo.delete({
     *   where: {
     *     // ... filter to delete one Courseplo
     *   }
     * })
     * 
    **/
    delete<T extends courseploDeleteArgs>(
      args: SelectSubset<T, courseploDeleteArgs>
    ): CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>>

    /**
     * Update one Courseplo.
     * @param {courseploUpdateArgs} args - Arguments to update one Courseplo.
     * @example
     * // Update one Courseplo
     * const courseplo = await prisma.courseplo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends courseploUpdateArgs>(
      args: SelectSubset<T, courseploUpdateArgs>
    ): CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>>

    /**
     * Delete zero or more Courseplos.
     * @param {courseploDeleteManyArgs} args - Arguments to filter Courseplos to delete.
     * @example
     * // Delete a few Courseplos
     * const { count } = await prisma.courseplo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends courseploDeleteManyArgs>(
      args?: SelectSubset<T, courseploDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courseplos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseploUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courseplos
     * const courseplo = await prisma.courseplo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends courseploUpdateManyArgs>(
      args: SelectSubset<T, courseploUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Courseplo.
     * @param {courseploUpsertArgs} args - Arguments to update or create a Courseplo.
     * @example
     * // Update or create a Courseplo
     * const courseplo = await prisma.courseplo.upsert({
     *   create: {
     *     // ... data to create a Courseplo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courseplo we want to update
     *   }
     * })
    **/
    upsert<T extends courseploUpsertArgs>(
      args: SelectSubset<T, courseploUpsertArgs>
    ): CheckSelect<T, Prisma__courseploClient<courseplo>, Prisma__courseploClient<courseploGetPayload<T>>>

    /**
     * Count the number of Courseplos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {courseploCountArgs} args - Arguments to filter Courseplos to count.
     * @example
     * // Count the number of Courseplos
     * const count = await prisma.courseplo.count({
     *   where: {
     *     // ... the filter for the Courseplos we want to count
     *   }
     * })
    **/
    count<T extends courseploCountArgs>(
      args?: Subset<T, courseploCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseploCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courseplo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseploAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseploAggregateArgs>(args: Subset<T, CourseploAggregateArgs>): PrismaPromise<GetCourseploAggregateType<T>>

    /**
     * Group by Courseplo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseploGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseploGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseploGroupByArgs['orderBy'] }
        : { orderBy?: CourseploGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseploGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseploGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for courseplo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__courseploClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    student<T extends studentArgs = {}>(args?: Subset<T, studentArgs>): CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * courseplo findUnique
   */
  export type courseploFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * Throw an Error if a courseplo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which courseplo to fetch.
     * 
    **/
    where: courseploWhereUniqueInput
  }


  /**
   * courseplo findFirst
   */
  export type courseploFindFirstArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * Throw an Error if a courseplo can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which courseplo to fetch.
     * 
    **/
    where?: courseploWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseplos to fetch.
     * 
    **/
    orderBy?: Enumerable<courseploOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courseplos.
     * 
    **/
    cursor?: courseploWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseplos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseplos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courseplos.
     * 
    **/
    distinct?: Enumerable<CourseploScalarFieldEnum>
  }


  /**
   * courseplo findMany
   */
  export type courseploFindManyArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * Filter, which courseplos to fetch.
     * 
    **/
    where?: courseploWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courseplos to fetch.
     * 
    **/
    orderBy?: Enumerable<courseploOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courseplos.
     * 
    **/
    cursor?: courseploWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courseplos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courseplos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CourseploScalarFieldEnum>
  }


  /**
   * courseplo create
   */
  export type courseploCreateArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * The data needed to create a courseplo.
     * 
    **/
    data: XOR<courseploCreateInput, courseploUncheckedCreateInput>
  }


  /**
   * courseplo createMany
   */
  export type courseploCreateManyArgs = {
    /**
     * The data used to create many courseplos.
     * 
    **/
    data: Enumerable<courseploCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * courseplo update
   */
  export type courseploUpdateArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * The data needed to update a courseplo.
     * 
    **/
    data: XOR<courseploUpdateInput, courseploUncheckedUpdateInput>
    /**
     * Choose, which courseplo to update.
     * 
    **/
    where: courseploWhereUniqueInput
  }


  /**
   * courseplo updateMany
   */
  export type courseploUpdateManyArgs = {
    /**
     * The data used to update courseplos.
     * 
    **/
    data: XOR<courseploUpdateManyMutationInput, courseploUncheckedUpdateManyInput>
    /**
     * Filter which courseplos to update
     * 
    **/
    where?: courseploWhereInput
  }


  /**
   * courseplo upsert
   */
  export type courseploUpsertArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * The filter to search for the courseplo to update in case it exists.
     * 
    **/
    where: courseploWhereUniqueInput
    /**
     * In case the courseplo found by the `where` argument doesn't exist, create a new courseplo with this data.
     * 
    **/
    create: XOR<courseploCreateInput, courseploUncheckedCreateInput>
    /**
     * In case the courseplo was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<courseploUpdateInput, courseploUncheckedUpdateInput>
  }


  /**
   * courseplo delete
   */
  export type courseploDeleteArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
    /**
     * Filter which courseplo to delete.
     * 
    **/
    where: courseploWhereUniqueInput
  }


  /**
   * courseplo deleteMany
   */
  export type courseploDeleteManyArgs = {
    /**
     * Filter which courseplos to delete
     * 
    **/
    where?: courseploWhereInput
  }


  /**
   * courseplo without action
   */
  export type courseploArgs = {
    /**
     * Select specific fields to fetch from the courseplo
     * 
    **/
    select?: courseploSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: courseploInclude | null
  }



  /**
   * Model schemeofstudy
   */


  export type AggregateSchemeofstudy = {
    _count: SchemeofstudyCountAggregateOutputType | null
    _avg: SchemeofstudyAvgAggregateOutputType | null
    _sum: SchemeofstudySumAggregateOutputType | null
    _min: SchemeofstudyMinAggregateOutputType | null
    _max: SchemeofstudyMaxAggregateOutputType | null
  }

  export type SchemeofstudyAvgAggregateOutputType = {
    Batch: number | null
  }

  export type SchemeofstudySumAggregateOutputType = {
    Batch: number | null
  }

  export type SchemeofstudyMinAggregateOutputType = {
    Semester: string | null
    Batch: number | null
    CourseCode: string | null
    CourseTitle: string | null
  }

  export type SchemeofstudyMaxAggregateOutputType = {
    Semester: string | null
    Batch: number | null
    CourseCode: string | null
    CourseTitle: string | null
  }

  export type SchemeofstudyCountAggregateOutputType = {
    Semester: number
    Batch: number
    CourseCode: number
    CourseTitle: number
    _all: number
  }


  export type SchemeofstudyAvgAggregateInputType = {
    Batch?: true
  }

  export type SchemeofstudySumAggregateInputType = {
    Batch?: true
  }

  export type SchemeofstudyMinAggregateInputType = {
    Semester?: true
    Batch?: true
    CourseCode?: true
    CourseTitle?: true
  }

  export type SchemeofstudyMaxAggregateInputType = {
    Semester?: true
    Batch?: true
    CourseCode?: true
    CourseTitle?: true
  }

  export type SchemeofstudyCountAggregateInputType = {
    Semester?: true
    Batch?: true
    CourseCode?: true
    CourseTitle?: true
    _all?: true
  }

  export type SchemeofstudyAggregateArgs = {
    /**
     * Filter which schemeofstudy to aggregate.
     * 
    **/
    where?: schemeofstudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schemeofstudies to fetch.
     * 
    **/
    orderBy?: Enumerable<schemeofstudyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: schemeofstudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schemeofstudies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schemeofstudies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned schemeofstudies
    **/
    _count?: true | SchemeofstudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchemeofstudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchemeofstudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchemeofstudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchemeofstudyMaxAggregateInputType
  }

  export type GetSchemeofstudyAggregateType<T extends SchemeofstudyAggregateArgs> = {
        [P in keyof T & keyof AggregateSchemeofstudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchemeofstudy[P]>
      : GetScalarType<T[P], AggregateSchemeofstudy[P]>
  }




  export type SchemeofstudyGroupByArgs = {
    where?: schemeofstudyWhereInput
    orderBy?: Enumerable<schemeofstudyOrderByWithAggregationInput>
    by: Array<SchemeofstudyScalarFieldEnum>
    having?: schemeofstudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchemeofstudyCountAggregateInputType | true
    _avg?: SchemeofstudyAvgAggregateInputType
    _sum?: SchemeofstudySumAggregateInputType
    _min?: SchemeofstudyMinAggregateInputType
    _max?: SchemeofstudyMaxAggregateInputType
  }


  export type SchemeofstudyGroupByOutputType = {
    Semester: string
    Batch: number
    CourseCode: string
    CourseTitle: string
    _count: SchemeofstudyCountAggregateOutputType | null
    _avg: SchemeofstudyAvgAggregateOutputType | null
    _sum: SchemeofstudySumAggregateOutputType | null
    _min: SchemeofstudyMinAggregateOutputType | null
    _max: SchemeofstudyMaxAggregateOutputType | null
  }

  type GetSchemeofstudyGroupByPayload<T extends SchemeofstudyGroupByArgs> = Promise<
    Array<
      PickArray<SchemeofstudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchemeofstudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchemeofstudyGroupByOutputType[P]>
            : GetScalarType<T[P], SchemeofstudyGroupByOutputType[P]>
        }
      >
    >


  export type schemeofstudySelect = {
    Semester?: boolean
    Batch?: boolean
    CourseCode?: boolean
    CourseTitle?: boolean
  }

  export type schemeofstudyGetPayload<
    S extends boolean | null | undefined | schemeofstudyArgs,
    U = keyof S
      > = S extends true
        ? schemeofstudy
    : S extends undefined
    ? never
    : S extends schemeofstudyArgs | schemeofstudyFindManyArgs
    ?'include' extends U
    ? schemeofstudy 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof schemeofstudy ?schemeofstudy [P]
  : 
     never
  } 
    : schemeofstudy
  : schemeofstudy


  type schemeofstudyCountArgs = Merge<
    Omit<schemeofstudyFindManyArgs, 'select' | 'include'> & {
      select?: SchemeofstudyCountAggregateInputType | true
    }
  >

  export interface schemeofstudyDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Schemeofstudy that matches the filter.
     * @param {schemeofstudyFindUniqueArgs} args - Arguments to find a Schemeofstudy
     * @example
     * // Get one Schemeofstudy
     * const schemeofstudy = await prisma.schemeofstudy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends schemeofstudyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, schemeofstudyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'schemeofstudy'> extends True ? CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>> : CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy | null >, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T> | null >>

    /**
     * Find the first Schemeofstudy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {schemeofstudyFindFirstArgs} args - Arguments to find a Schemeofstudy
     * @example
     * // Get one Schemeofstudy
     * const schemeofstudy = await prisma.schemeofstudy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends schemeofstudyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, schemeofstudyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'schemeofstudy'> extends True ? CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>> : CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy | null >, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T> | null >>

    /**
     * Find zero or more Schemeofstudies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {schemeofstudyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schemeofstudies
     * const schemeofstudies = await prisma.schemeofstudy.findMany()
     * 
     * // Get first 10 Schemeofstudies
     * const schemeofstudies = await prisma.schemeofstudy.findMany({ take: 10 })
     * 
     * // Only select the `Semester`
     * const schemeofstudyWithSemesterOnly = await prisma.schemeofstudy.findMany({ select: { Semester: true } })
     * 
    **/
    findMany<T extends schemeofstudyFindManyArgs>(
      args?: SelectSubset<T, schemeofstudyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<schemeofstudy>>, PrismaPromise<Array<schemeofstudyGetPayload<T>>>>

    /**
     * Create a Schemeofstudy.
     * @param {schemeofstudyCreateArgs} args - Arguments to create a Schemeofstudy.
     * @example
     * // Create one Schemeofstudy
     * const Schemeofstudy = await prisma.schemeofstudy.create({
     *   data: {
     *     // ... data to create a Schemeofstudy
     *   }
     * })
     * 
    **/
    create<T extends schemeofstudyCreateArgs>(
      args: SelectSubset<T, schemeofstudyCreateArgs>
    ): CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>>

    /**
     * Create many Schemeofstudies.
     *     @param {schemeofstudyCreateManyArgs} args - Arguments to create many Schemeofstudies.
     *     @example
     *     // Create many Schemeofstudies
     *     const schemeofstudy = await prisma.schemeofstudy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends schemeofstudyCreateManyArgs>(
      args?: SelectSubset<T, schemeofstudyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Schemeofstudy.
     * @param {schemeofstudyDeleteArgs} args - Arguments to delete one Schemeofstudy.
     * @example
     * // Delete one Schemeofstudy
     * const Schemeofstudy = await prisma.schemeofstudy.delete({
     *   where: {
     *     // ... filter to delete one Schemeofstudy
     *   }
     * })
     * 
    **/
    delete<T extends schemeofstudyDeleteArgs>(
      args: SelectSubset<T, schemeofstudyDeleteArgs>
    ): CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>>

    /**
     * Update one Schemeofstudy.
     * @param {schemeofstudyUpdateArgs} args - Arguments to update one Schemeofstudy.
     * @example
     * // Update one Schemeofstudy
     * const schemeofstudy = await prisma.schemeofstudy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends schemeofstudyUpdateArgs>(
      args: SelectSubset<T, schemeofstudyUpdateArgs>
    ): CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>>

    /**
     * Delete zero or more Schemeofstudies.
     * @param {schemeofstudyDeleteManyArgs} args - Arguments to filter Schemeofstudies to delete.
     * @example
     * // Delete a few Schemeofstudies
     * const { count } = await prisma.schemeofstudy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends schemeofstudyDeleteManyArgs>(
      args?: SelectSubset<T, schemeofstudyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schemeofstudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {schemeofstudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schemeofstudies
     * const schemeofstudy = await prisma.schemeofstudy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends schemeofstudyUpdateManyArgs>(
      args: SelectSubset<T, schemeofstudyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Schemeofstudy.
     * @param {schemeofstudyUpsertArgs} args - Arguments to update or create a Schemeofstudy.
     * @example
     * // Update or create a Schemeofstudy
     * const schemeofstudy = await prisma.schemeofstudy.upsert({
     *   create: {
     *     // ... data to create a Schemeofstudy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schemeofstudy we want to update
     *   }
     * })
    **/
    upsert<T extends schemeofstudyUpsertArgs>(
      args: SelectSubset<T, schemeofstudyUpsertArgs>
    ): CheckSelect<T, Prisma__schemeofstudyClient<schemeofstudy>, Prisma__schemeofstudyClient<schemeofstudyGetPayload<T>>>

    /**
     * Count the number of Schemeofstudies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {schemeofstudyCountArgs} args - Arguments to filter Schemeofstudies to count.
     * @example
     * // Count the number of Schemeofstudies
     * const count = await prisma.schemeofstudy.count({
     *   where: {
     *     // ... the filter for the Schemeofstudies we want to count
     *   }
     * })
    **/
    count<T extends schemeofstudyCountArgs>(
      args?: Subset<T, schemeofstudyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchemeofstudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schemeofstudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeofstudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchemeofstudyAggregateArgs>(args: Subset<T, SchemeofstudyAggregateArgs>): PrismaPromise<GetSchemeofstudyAggregateType<T>>

    /**
     * Group by Schemeofstudy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchemeofstudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchemeofstudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchemeofstudyGroupByArgs['orderBy'] }
        : { orderBy?: SchemeofstudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchemeofstudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchemeofstudyGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for schemeofstudy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__schemeofstudyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * schemeofstudy findUnique
   */
  export type schemeofstudyFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * Throw an Error if a schemeofstudy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which schemeofstudy to fetch.
     * 
    **/
    where: schemeofstudyWhereUniqueInput
  }


  /**
   * schemeofstudy findFirst
   */
  export type schemeofstudyFindFirstArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * Throw an Error if a schemeofstudy can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which schemeofstudy to fetch.
     * 
    **/
    where?: schemeofstudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schemeofstudies to fetch.
     * 
    **/
    orderBy?: Enumerable<schemeofstudyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for schemeofstudies.
     * 
    **/
    cursor?: schemeofstudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schemeofstudies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schemeofstudies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of schemeofstudies.
     * 
    **/
    distinct?: Enumerable<SchemeofstudyScalarFieldEnum>
  }


  /**
   * schemeofstudy findMany
   */
  export type schemeofstudyFindManyArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * Filter, which schemeofstudies to fetch.
     * 
    **/
    where?: schemeofstudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of schemeofstudies to fetch.
     * 
    **/
    orderBy?: Enumerable<schemeofstudyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing schemeofstudies.
     * 
    **/
    cursor?: schemeofstudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` schemeofstudies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` schemeofstudies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SchemeofstudyScalarFieldEnum>
  }


  /**
   * schemeofstudy create
   */
  export type schemeofstudyCreateArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * The data needed to create a schemeofstudy.
     * 
    **/
    data: XOR<schemeofstudyCreateInput, schemeofstudyUncheckedCreateInput>
  }


  /**
   * schemeofstudy createMany
   */
  export type schemeofstudyCreateManyArgs = {
    /**
     * The data used to create many schemeofstudies.
     * 
    **/
    data: Enumerable<schemeofstudyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * schemeofstudy update
   */
  export type schemeofstudyUpdateArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * The data needed to update a schemeofstudy.
     * 
    **/
    data: XOR<schemeofstudyUpdateInput, schemeofstudyUncheckedUpdateInput>
    /**
     * Choose, which schemeofstudy to update.
     * 
    **/
    where: schemeofstudyWhereUniqueInput
  }


  /**
   * schemeofstudy updateMany
   */
  export type schemeofstudyUpdateManyArgs = {
    /**
     * The data used to update schemeofstudies.
     * 
    **/
    data: XOR<schemeofstudyUpdateManyMutationInput, schemeofstudyUncheckedUpdateManyInput>
    /**
     * Filter which schemeofstudies to update
     * 
    **/
    where?: schemeofstudyWhereInput
  }


  /**
   * schemeofstudy upsert
   */
  export type schemeofstudyUpsertArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * The filter to search for the schemeofstudy to update in case it exists.
     * 
    **/
    where: schemeofstudyWhereUniqueInput
    /**
     * In case the schemeofstudy found by the `where` argument doesn't exist, create a new schemeofstudy with this data.
     * 
    **/
    create: XOR<schemeofstudyCreateInput, schemeofstudyUncheckedCreateInput>
    /**
     * In case the schemeofstudy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<schemeofstudyUpdateInput, schemeofstudyUncheckedUpdateInput>
  }


  /**
   * schemeofstudy delete
   */
  export type schemeofstudyDeleteArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
    /**
     * Filter which schemeofstudy to delete.
     * 
    **/
    where: schemeofstudyWhereUniqueInput
  }


  /**
   * schemeofstudy deleteMany
   */
  export type schemeofstudyDeleteManyArgs = {
    /**
     * Filter which schemeofstudies to delete
     * 
    **/
    where?: schemeofstudyWhereInput
  }


  /**
   * schemeofstudy without action
   */
  export type schemeofstudyArgs = {
    /**
     * Select specific fields to fetch from the schemeofstudy
     * 
    **/
    select?: schemeofstudySelect | null
  }



  /**
   * Model student
   */


  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    RegNo: number | null
    Batch: number | null
  }

  export type StudentSumAggregateOutputType = {
    RegNo: number | null
    Batch: number | null
  }

  export type StudentMinAggregateOutputType = {
    RegNo: number | null
    Faculty: string | null
    Name: string | null
    Batch: number | null
  }

  export type StudentMaxAggregateOutputType = {
    RegNo: number | null
    Faculty: string | null
    Name: string | null
    Batch: number | null
  }

  export type StudentCountAggregateOutputType = {
    RegNo: number
    Faculty: number
    Name: number
    Batch: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    RegNo?: true
    Batch?: true
  }

  export type StudentSumAggregateInputType = {
    RegNo?: true
    Batch?: true
  }

  export type StudentMinAggregateInputType = {
    RegNo?: true
    Faculty?: true
    Name?: true
    Batch?: true
  }

  export type StudentMaxAggregateInputType = {
    RegNo?: true
    Faculty?: true
    Name?: true
    Batch?: true
  }

  export type StudentCountAggregateInputType = {
    RegNo?: true
    Faculty?: true
    Name?: true
    Batch?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which student to aggregate.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs = {
    where?: studentWhereInput
    orderBy?: Enumerable<studentOrderByWithAggregationInput>
    by: Array<StudentScalarFieldEnum>
    having?: studentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }


  export type StudentGroupByOutputType = {
    RegNo: number
    Faculty: string
    Name: string
    Batch: number | null
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Promise<
    Array<
      PickArray<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type studentSelect = {
    RegNo?: boolean
    Faculty?: boolean
    Name?: boolean
    Batch?: boolean
    courseplo?: boolean | courseploArgs
  }

  export type studentInclude = {
    courseplo?: boolean | courseploArgs
  }

  export type studentGetPayload<
    S extends boolean | null | undefined | studentArgs,
    U = keyof S
      > = S extends true
        ? student
    : S extends undefined
    ? never
    : S extends studentArgs | studentFindManyArgs
    ?'include' extends U
    ? student  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'courseplo'
        ? courseploGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof student ?student [P]
  : 
          P extends 'courseplo'
        ? courseploGetPayload<S['select'][P]> | null : never
  } 
    : student
  : student


  type studentCountArgs = Merge<
    Omit<studentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface studentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Student that matches the filter.
     * @param {studentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends studentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, studentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'student'> extends True ? CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>> : CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends studentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, studentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'student'> extends True ? CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>> : CheckSelect<T, Prisma__studentClient<student | null >, Prisma__studentClient<studentGetPayload<T> | null >>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `RegNo`
     * const studentWithRegNoOnly = await prisma.student.findMany({ select: { RegNo: true } })
     * 
    **/
    findMany<T extends studentFindManyArgs>(
      args?: SelectSubset<T, studentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<student>>, PrismaPromise<Array<studentGetPayload<T>>>>

    /**
     * Create a Student.
     * @param {studentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends studentCreateArgs>(
      args: SelectSubset<T, studentCreateArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Create many Students.
     *     @param {studentCreateManyArgs} args - Arguments to create many Students.
     *     @example
     *     // Create many Students
     *     const student = await prisma.student.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends studentCreateManyArgs>(
      args?: SelectSubset<T, studentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Student.
     * @param {studentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends studentDeleteArgs>(
      args: SelectSubset<T, studentDeleteArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Update one Student.
     * @param {studentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends studentUpdateArgs>(
      args: SelectSubset<T, studentUpdateArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {studentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends studentDeleteManyArgs>(
      args?: SelectSubset<T, studentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends studentUpdateManyArgs>(
      args: SelectSubset<T, studentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {studentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends studentUpsertArgs>(
      args: SelectSubset<T, studentUpsertArgs>
    ): CheckSelect<T, Prisma__studentClient<student>, Prisma__studentClient<studentGetPayload<T>>>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentCountArgs>(
      args?: Subset<T, studentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__studentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    courseplo<T extends courseploArgs = {}>(args?: Subset<T, courseploArgs>): CheckSelect<T, Prisma__courseploClient<courseplo | null >, Prisma__courseploClient<courseploGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * student findUnique
   */
  export type studentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Throw an Error if a student can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which student to fetch.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student findFirst
   */
  export type studentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Throw an Error if a student can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which student to fetch.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     * 
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * student findMany
   */
  export type studentFindManyArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Filter, which students to fetch.
     * 
    **/
    where?: studentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     * 
    **/
    orderBy?: Enumerable<studentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     * 
    **/
    cursor?: studentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * student create
   */
  export type studentCreateArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The data needed to create a student.
     * 
    **/
    data: XOR<studentCreateInput, studentUncheckedCreateInput>
  }


  /**
   * student createMany
   */
  export type studentCreateManyArgs = {
    /**
     * The data used to create many students.
     * 
    **/
    data: Enumerable<studentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * student update
   */
  export type studentUpdateArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The data needed to update a student.
     * 
    **/
    data: XOR<studentUpdateInput, studentUncheckedUpdateInput>
    /**
     * Choose, which student to update.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student updateMany
   */
  export type studentUpdateManyArgs = {
    /**
     * The data used to update students.
     * 
    **/
    data: XOR<studentUpdateManyMutationInput, studentUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     * 
    **/
    where?: studentWhereInput
  }


  /**
   * student upsert
   */
  export type studentUpsertArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * The filter to search for the student to update in case it exists.
     * 
    **/
    where: studentWhereUniqueInput
    /**
     * In case the student found by the `where` argument doesn't exist, create a new student with this data.
     * 
    **/
    create: XOR<studentCreateInput, studentUncheckedCreateInput>
    /**
     * In case the student was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<studentUpdateInput, studentUncheckedUpdateInput>
  }


  /**
   * student delete
   */
  export type studentDeleteArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
    /**
     * Filter which student to delete.
     * 
    **/
    where: studentWhereUniqueInput
  }


  /**
   * student deleteMany
   */
  export type studentDeleteManyArgs = {
    /**
     * Filter which students to delete
     * 
    **/
    where?: studentWhereInput
  }


  /**
   * student without action
   */
  export type studentArgs = {
    /**
     * Select specific fields to fetch from the student
     * 
    **/
    select?: studentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: studentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CourseploScalarFieldEnum: {
    RegNo: 'RegNo',
    CourseCode: 'CourseCode',
    Semester: 'Semester',
    PLO1: 'PLO1',
    PLO2: 'PLO2',
    PLO3: 'PLO3',
    PLO4: 'PLO4',
    PLO5: 'PLO5',
    PLO6: 'PLO6',
    PLO7: 'PLO7',
    PLO8: 'PLO8',
    PLO9: 'PLO9',
    PLO10: 'PLO10',
    PLO11: 'PLO11',
    PLO12: 'PLO12'
  };

  export type CourseploScalarFieldEnum = (typeof CourseploScalarFieldEnum)[keyof typeof CourseploScalarFieldEnum]


  export const SchemeofstudyScalarFieldEnum: {
    Semester: 'Semester',
    Batch: 'Batch',
    CourseCode: 'CourseCode',
    CourseTitle: 'CourseTitle'
  };

  export type SchemeofstudyScalarFieldEnum = (typeof SchemeofstudyScalarFieldEnum)[keyof typeof SchemeofstudyScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    RegNo: 'RegNo',
    Faculty: 'Faculty',
    Name: 'Name',
    Batch: 'Batch'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type courseploWhereInput = {
    AND?: Enumerable<courseploWhereInput>
    OR?: Enumerable<courseploWhereInput>
    NOT?: Enumerable<courseploWhereInput>
    RegNo?: IntFilter | number
    CourseCode?: StringFilter | string
    Semester?: StringFilter | string
    PLO1?: StringFilter | string
    PLO2?: StringFilter | string
    PLO3?: StringFilter | string
    PLO4?: StringFilter | string
    PLO5?: StringFilter | string
    PLO6?: StringFilter | string
    PLO7?: StringFilter | string
    PLO8?: StringFilter | string
    PLO9?: StringFilter | string
    PLO10?: StringFilter | string
    PLO11?: StringFilter | string
    PLO12?: StringFilter | string
    student?: XOR<StudentRelationFilter, studentWhereInput>
  }

  export type courseploOrderByWithRelationInput = {
    RegNo?: SortOrder
    CourseCode?: SortOrder
    Semester?: SortOrder
    PLO1?: SortOrder
    PLO2?: SortOrder
    PLO3?: SortOrder
    PLO4?: SortOrder
    PLO5?: SortOrder
    PLO6?: SortOrder
    PLO7?: SortOrder
    PLO8?: SortOrder
    PLO9?: SortOrder
    PLO10?: SortOrder
    PLO11?: SortOrder
    PLO12?: SortOrder
    student?: studentOrderByWithRelationInput
  }

  export type courseploWhereUniqueInput = {
    RegNo?: number
  }

  export type courseploOrderByWithAggregationInput = {
    RegNo?: SortOrder
    CourseCode?: SortOrder
    Semester?: SortOrder
    PLO1?: SortOrder
    PLO2?: SortOrder
    PLO3?: SortOrder
    PLO4?: SortOrder
    PLO5?: SortOrder
    PLO6?: SortOrder
    PLO7?: SortOrder
    PLO8?: SortOrder
    PLO9?: SortOrder
    PLO10?: SortOrder
    PLO11?: SortOrder
    PLO12?: SortOrder
    _count?: courseploCountOrderByAggregateInput
    _avg?: courseploAvgOrderByAggregateInput
    _max?: courseploMaxOrderByAggregateInput
    _min?: courseploMinOrderByAggregateInput
    _sum?: courseploSumOrderByAggregateInput
  }

  export type courseploScalarWhereWithAggregatesInput = {
    AND?: Enumerable<courseploScalarWhereWithAggregatesInput>
    OR?: Enumerable<courseploScalarWhereWithAggregatesInput>
    NOT?: Enumerable<courseploScalarWhereWithAggregatesInput>
    RegNo?: IntWithAggregatesFilter | number
    CourseCode?: StringWithAggregatesFilter | string
    Semester?: StringWithAggregatesFilter | string
    PLO1?: StringWithAggregatesFilter | string
    PLO2?: StringWithAggregatesFilter | string
    PLO3?: StringWithAggregatesFilter | string
    PLO4?: StringWithAggregatesFilter | string
    PLO5?: StringWithAggregatesFilter | string
    PLO6?: StringWithAggregatesFilter | string
    PLO7?: StringWithAggregatesFilter | string
    PLO8?: StringWithAggregatesFilter | string
    PLO9?: StringWithAggregatesFilter | string
    PLO10?: StringWithAggregatesFilter | string
    PLO11?: StringWithAggregatesFilter | string
    PLO12?: StringWithAggregatesFilter | string
  }

  export type schemeofstudyWhereInput = {
    AND?: Enumerable<schemeofstudyWhereInput>
    OR?: Enumerable<schemeofstudyWhereInput>
    NOT?: Enumerable<schemeofstudyWhereInput>
    Semester?: StringFilter | string
    Batch?: IntFilter | number
    CourseCode?: StringFilter | string
    CourseTitle?: StringFilter | string
  }

  export type schemeofstudyOrderByWithRelationInput = {
    Semester?: SortOrder
    Batch?: SortOrder
    CourseCode?: SortOrder
    CourseTitle?: SortOrder
  }

  export type schemeofstudyWhereUniqueInput = {
    CourseCode?: string
  }

  export type schemeofstudyOrderByWithAggregationInput = {
    Semester?: SortOrder
    Batch?: SortOrder
    CourseCode?: SortOrder
    CourseTitle?: SortOrder
    _count?: schemeofstudyCountOrderByAggregateInput
    _avg?: schemeofstudyAvgOrderByAggregateInput
    _max?: schemeofstudyMaxOrderByAggregateInput
    _min?: schemeofstudyMinOrderByAggregateInput
    _sum?: schemeofstudySumOrderByAggregateInput
  }

  export type schemeofstudyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<schemeofstudyScalarWhereWithAggregatesInput>
    OR?: Enumerable<schemeofstudyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<schemeofstudyScalarWhereWithAggregatesInput>
    Semester?: StringWithAggregatesFilter | string
    Batch?: IntWithAggregatesFilter | number
    CourseCode?: StringWithAggregatesFilter | string
    CourseTitle?: StringWithAggregatesFilter | string
  }

  export type studentWhereInput = {
    AND?: Enumerable<studentWhereInput>
    OR?: Enumerable<studentWhereInput>
    NOT?: Enumerable<studentWhereInput>
    RegNo?: IntFilter | number
    Faculty?: StringFilter | string
    Name?: StringFilter | string
    Batch?: IntNullableFilter | number | null
    courseplo?: XOR<CourseploRelationFilter, courseploWhereInput> | null
  }

  export type studentOrderByWithRelationInput = {
    RegNo?: SortOrder
    Faculty?: SortOrder
    Name?: SortOrder
    Batch?: SortOrder
    courseplo?: courseploOrderByWithRelationInput
  }

  export type studentWhereUniqueInput = {
    RegNo?: number
  }

  export type studentOrderByWithAggregationInput = {
    RegNo?: SortOrder
    Faculty?: SortOrder
    Name?: SortOrder
    Batch?: SortOrder
    _count?: studentCountOrderByAggregateInput
    _avg?: studentAvgOrderByAggregateInput
    _max?: studentMaxOrderByAggregateInput
    _min?: studentMinOrderByAggregateInput
    _sum?: studentSumOrderByAggregateInput
  }

  export type studentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<studentScalarWhereWithAggregatesInput>
    OR?: Enumerable<studentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<studentScalarWhereWithAggregatesInput>
    RegNo?: IntWithAggregatesFilter | number
    Faculty?: StringWithAggregatesFilter | string
    Name?: StringWithAggregatesFilter | string
    Batch?: IntNullableWithAggregatesFilter | number | null
  }

  export type courseploCreateInput = {
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
    student: studentCreateNestedOneWithoutCourseploInput
  }

  export type courseploUncheckedCreateInput = {
    RegNo: number
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
  }

  export type courseploUpdateInput = {
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
    student?: studentUpdateOneRequiredWithoutCourseploInput
  }

  export type courseploUncheckedUpdateInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
  }

  export type courseploCreateManyInput = {
    RegNo: number
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
  }

  export type courseploUpdateManyMutationInput = {
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
  }

  export type courseploUncheckedUpdateManyInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
  }

  export type schemeofstudyCreateInput = {
    Semester: string
    Batch: number
    CourseCode: string
    CourseTitle: string
  }

  export type schemeofstudyUncheckedCreateInput = {
    Semester: string
    Batch: number
    CourseCode: string
    CourseTitle: string
  }

  export type schemeofstudyUpdateInput = {
    Semester?: StringFieldUpdateOperationsInput | string
    Batch?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    CourseTitle?: StringFieldUpdateOperationsInput | string
  }

  export type schemeofstudyUncheckedUpdateInput = {
    Semester?: StringFieldUpdateOperationsInput | string
    Batch?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    CourseTitle?: StringFieldUpdateOperationsInput | string
  }

  export type schemeofstudyCreateManyInput = {
    Semester: string
    Batch: number
    CourseCode: string
    CourseTitle: string
  }

  export type schemeofstudyUpdateManyMutationInput = {
    Semester?: StringFieldUpdateOperationsInput | string
    Batch?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    CourseTitle?: StringFieldUpdateOperationsInput | string
  }

  export type schemeofstudyUncheckedUpdateManyInput = {
    Semester?: StringFieldUpdateOperationsInput | string
    Batch?: IntFieldUpdateOperationsInput | number
    CourseCode?: StringFieldUpdateOperationsInput | string
    CourseTitle?: StringFieldUpdateOperationsInput | string
  }

  export type studentCreateInput = {
    RegNo: number
    Faculty: string
    Name: string
    Batch?: number | null
    courseplo?: courseploCreateNestedOneWithoutStudentInput
  }

  export type studentUncheckedCreateInput = {
    RegNo: number
    Faculty: string
    Name: string
    Batch?: number | null
    courseplo?: courseploUncheckedCreateNestedOneWithoutStudentInput
  }

  export type studentUpdateInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
    courseplo?: courseploUpdateOneWithoutStudentInput
  }

  export type studentUncheckedUpdateInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
    courseplo?: courseploUncheckedUpdateOneWithoutStudentInput
  }

  export type studentCreateManyInput = {
    RegNo: number
    Faculty: string
    Name: string
    Batch?: number | null
  }

  export type studentUpdateManyMutationInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type studentUncheckedUpdateManyInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StudentRelationFilter = {
    is?: studentWhereInput
    isNot?: studentWhereInput
  }

  export type courseploCountOrderByAggregateInput = {
    RegNo?: SortOrder
    CourseCode?: SortOrder
    Semester?: SortOrder
    PLO1?: SortOrder
    PLO2?: SortOrder
    PLO3?: SortOrder
    PLO4?: SortOrder
    PLO5?: SortOrder
    PLO6?: SortOrder
    PLO7?: SortOrder
    PLO8?: SortOrder
    PLO9?: SortOrder
    PLO10?: SortOrder
    PLO11?: SortOrder
    PLO12?: SortOrder
  }

  export type courseploAvgOrderByAggregateInput = {
    RegNo?: SortOrder
  }

  export type courseploMaxOrderByAggregateInput = {
    RegNo?: SortOrder
    CourseCode?: SortOrder
    Semester?: SortOrder
    PLO1?: SortOrder
    PLO2?: SortOrder
    PLO3?: SortOrder
    PLO4?: SortOrder
    PLO5?: SortOrder
    PLO6?: SortOrder
    PLO7?: SortOrder
    PLO8?: SortOrder
    PLO9?: SortOrder
    PLO10?: SortOrder
    PLO11?: SortOrder
    PLO12?: SortOrder
  }

  export type courseploMinOrderByAggregateInput = {
    RegNo?: SortOrder
    CourseCode?: SortOrder
    Semester?: SortOrder
    PLO1?: SortOrder
    PLO2?: SortOrder
    PLO3?: SortOrder
    PLO4?: SortOrder
    PLO5?: SortOrder
    PLO6?: SortOrder
    PLO7?: SortOrder
    PLO8?: SortOrder
    PLO9?: SortOrder
    PLO10?: SortOrder
    PLO11?: SortOrder
    PLO12?: SortOrder
  }

  export type courseploSumOrderByAggregateInput = {
    RegNo?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type schemeofstudyCountOrderByAggregateInput = {
    Semester?: SortOrder
    Batch?: SortOrder
    CourseCode?: SortOrder
    CourseTitle?: SortOrder
  }

  export type schemeofstudyAvgOrderByAggregateInput = {
    Batch?: SortOrder
  }

  export type schemeofstudyMaxOrderByAggregateInput = {
    Semester?: SortOrder
    Batch?: SortOrder
    CourseCode?: SortOrder
    CourseTitle?: SortOrder
  }

  export type schemeofstudyMinOrderByAggregateInput = {
    Semester?: SortOrder
    Batch?: SortOrder
    CourseCode?: SortOrder
    CourseTitle?: SortOrder
  }

  export type schemeofstudySumOrderByAggregateInput = {
    Batch?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CourseploRelationFilter = {
    is?: courseploWhereInput | null
    isNot?: courseploWhereInput | null
  }

  export type studentCountOrderByAggregateInput = {
    RegNo?: SortOrder
    Faculty?: SortOrder
    Name?: SortOrder
    Batch?: SortOrder
  }

  export type studentAvgOrderByAggregateInput = {
    RegNo?: SortOrder
    Batch?: SortOrder
  }

  export type studentMaxOrderByAggregateInput = {
    RegNo?: SortOrder
    Faculty?: SortOrder
    Name?: SortOrder
    Batch?: SortOrder
  }

  export type studentMinOrderByAggregateInput = {
    RegNo?: SortOrder
    Faculty?: SortOrder
    Name?: SortOrder
    Batch?: SortOrder
  }

  export type studentSumOrderByAggregateInput = {
    RegNo?: SortOrder
    Batch?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type studentCreateNestedOneWithoutCourseploInput = {
    create?: XOR<studentCreateWithoutCourseploInput, studentUncheckedCreateWithoutCourseploInput>
    connectOrCreate?: studentCreateOrConnectWithoutCourseploInput
    connect?: studentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type studentUpdateOneRequiredWithoutCourseploInput = {
    create?: XOR<studentCreateWithoutCourseploInput, studentUncheckedCreateWithoutCourseploInput>
    connectOrCreate?: studentCreateOrConnectWithoutCourseploInput
    upsert?: studentUpsertWithoutCourseploInput
    connect?: studentWhereUniqueInput
    update?: XOR<studentUpdateWithoutCourseploInput, studentUncheckedUpdateWithoutCourseploInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type courseploCreateNestedOneWithoutStudentInput = {
    create?: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
    connectOrCreate?: courseploCreateOrConnectWithoutStudentInput
    connect?: courseploWhereUniqueInput
  }

  export type courseploUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
    connectOrCreate?: courseploCreateOrConnectWithoutStudentInput
    connect?: courseploWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type courseploUpdateOneWithoutStudentInput = {
    create?: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
    connectOrCreate?: courseploCreateOrConnectWithoutStudentInput
    upsert?: courseploUpsertWithoutStudentInput
    disconnect?: boolean
    delete?: boolean
    connect?: courseploWhereUniqueInput
    update?: XOR<courseploUpdateWithoutStudentInput, courseploUncheckedUpdateWithoutStudentInput>
  }

  export type courseploUncheckedUpdateOneWithoutStudentInput = {
    create?: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
    connectOrCreate?: courseploCreateOrConnectWithoutStudentInput
    upsert?: courseploUpsertWithoutStudentInput
    disconnect?: boolean
    delete?: boolean
    connect?: courseploWhereUniqueInput
    update?: XOR<courseploUpdateWithoutStudentInput, courseploUncheckedUpdateWithoutStudentInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type studentCreateWithoutCourseploInput = {
    RegNo: number
    Faculty: string
    Name: string
    Batch?: number | null
  }

  export type studentUncheckedCreateWithoutCourseploInput = {
    RegNo: number
    Faculty: string
    Name: string
    Batch?: number | null
  }

  export type studentCreateOrConnectWithoutCourseploInput = {
    where: studentWhereUniqueInput
    create: XOR<studentCreateWithoutCourseploInput, studentUncheckedCreateWithoutCourseploInput>
  }

  export type studentUpsertWithoutCourseploInput = {
    update: XOR<studentUpdateWithoutCourseploInput, studentUncheckedUpdateWithoutCourseploInput>
    create: XOR<studentCreateWithoutCourseploInput, studentUncheckedCreateWithoutCourseploInput>
  }

  export type studentUpdateWithoutCourseploInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type studentUncheckedUpdateWithoutCourseploInput = {
    RegNo?: IntFieldUpdateOperationsInput | number
    Faculty?: StringFieldUpdateOperationsInput | string
    Name?: StringFieldUpdateOperationsInput | string
    Batch?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type courseploCreateWithoutStudentInput = {
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
  }

  export type courseploUncheckedCreateWithoutStudentInput = {
    CourseCode: string
    Semester: string
    PLO1: string
    PLO2: string
    PLO3: string
    PLO4: string
    PLO5: string
    PLO6: string
    PLO7: string
    PLO8: string
    PLO9: string
    PLO10: string
    PLO11: string
    PLO12: string
  }

  export type courseploCreateOrConnectWithoutStudentInput = {
    where: courseploWhereUniqueInput
    create: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
  }

  export type courseploUpsertWithoutStudentInput = {
    update: XOR<courseploUpdateWithoutStudentInput, courseploUncheckedUpdateWithoutStudentInput>
    create: XOR<courseploCreateWithoutStudentInput, courseploUncheckedCreateWithoutStudentInput>
  }

  export type courseploUpdateWithoutStudentInput = {
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
  }

  export type courseploUncheckedUpdateWithoutStudentInput = {
    CourseCode?: StringFieldUpdateOperationsInput | string
    Semester?: StringFieldUpdateOperationsInput | string
    PLO1?: StringFieldUpdateOperationsInput | string
    PLO2?: StringFieldUpdateOperationsInput | string
    PLO3?: StringFieldUpdateOperationsInput | string
    PLO4?: StringFieldUpdateOperationsInput | string
    PLO5?: StringFieldUpdateOperationsInput | string
    PLO6?: StringFieldUpdateOperationsInput | string
    PLO7?: StringFieldUpdateOperationsInput | string
    PLO8?: StringFieldUpdateOperationsInput | string
    PLO9?: StringFieldUpdateOperationsInput | string
    PLO10?: StringFieldUpdateOperationsInput | string
    PLO11?: StringFieldUpdateOperationsInput | string
    PLO12?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}